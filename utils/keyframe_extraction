import cv2
import os
import numpy as np


def detect_keyframes(input_dir, threshold, output_dir, method: str = 'nonzero'):
    """
    methods: rgb, nonzero, hist
    """
    prefix = input_dir.split('/')[-1]
    output_dir_prefixed = os.path.join(output_dir, prefix)
    if not os.path.exists(output_dir_prefixed):
        os.makedirs(output_dir_prefixed)

    for r, d, filenames in os.walk(input_dir):
        num_filenames = len([filename for filename in filenames if '.jpg' in filename])
        if num_filenames == 0:
            print(f'Skipping due to num_filenames: {num_filenames}')
            continue
        filename = prefix + '_0.jpg'
        previous_frame = cv2.imread(os.path.join(input_dir, filename))
        previous_keyframe = previous_frame
        cv2.imwrite(os.path.join(output_dir_prefixed, filename), previous_keyframe)

        keyframe_counter = 0
        for num_filename in range(1, num_filenames):
            filename = input_dir.split('/')[-1] + f'_{num_filename}.jpg'
            current_frame = cv2.imread(os.path.join(input_dir, filename))

            if method == 'rgb':
                diff = cv2.absdiff(current_frame, previous_keyframe)
                rgb_diff = np.sum(diff)
                condition = rgb_diff > threshold
            elif method == 'nonzero':
                diff = cv2.absdiff(current_frame, previous_keyframe)
                non_zero_count = np.count_nonzero(diff)
                condition = non_zero_count > threshold
            elif method == 'hist':
                previous_histogram = cv2.calcHist(cv2.cvtColor(previous_keyframe, cv2.COLOR_BGR2GRAY), channels=[1], mask=None, histSize=[128], ranges=[0, 256])
                current_histogram = cv2.calcHist(cv2.cvtColor(current_frame, cv2.COLOR_BGR2GRAY), channels=[1], mask=None, histSize=[128], ranges=[0, 256])
                diff = np.sum(np.abs(current_histogram - previous_histogram))
                condition = diff > threshold

            if condition:
                cv2.imwrite(os.path.join(output_dir_prefixed, filename), current_frame)
                previous_keyframe = current_frame
                keyframe_counter += 1
            previous_frame = current_frame
        print(f'Keyframes detected: {keyframe_counter}')




if __name__ == "__main__":
    from matplotlib import pyplot as plt

    input_dirs = ['/dih4/dih4_2/hearai/data/frames/pjm',
                  '/dih4/dih4_2/hearai/data/frames/glex',
                  '/dih4/dih4_2/hearai/data/frames/galex',
                  '/dih4/dih4_2/hearai/data/frames/basic_lexicon',
                  '/dih4/dih4_2/hearai/data/frames/gsll_done']

    thresholds = [1e7, 50e3, 60e3, 0.6e6, 1.5e7]
    
    output_dirs = ['/dih4/dih4_2/hearai/wfilipiuk/keyframes/pjm_keyframes',
                   '/dih4/dih4_2/hearai/wfilipiuk/keyframes/glex_keyframes',
                   '/dih4/dih4_2/hearai/wfilipiuk/keyframes/galex_keyframes',
                   '/dih4/dih4_2/hearai/wfilipiuk/keyframes/basic_lexicon_keyframes',
                   '/dih4/dih4_2/hearai/wfilipiuk/keyframes/gsll_keyframes']

    for input_dir, output_dir, threshold in zip(input_dirs[:1], output_dirs[:1], thresholds[:1]):
        n_orig_keyframes_list = []
        n_keyframes_detected_list = []
        changes = []
        for r, video_directories, f in os.walk(input_dir):
            for i, video_directory in enumerate(video_directories):
                print(f'{i}/{len(video_directories) - 1}')
                print(input_dir, video_directory)
                detect_keyframes(input_dir=os.path.join(input_dir, video_directory),
                                 threshold=threshold,
                                 output_dir=output_dir,
                                 method='rgb')
